---
- name: Create EC2 instance with variables
  hosts: localhost

  # Load variables from files
  vars_files:
    - ../vars/aws_config.yml
    - ../vars/development.yml  # change to production.yml for prod

  vars:
    _state: present

  tasks:
    - name: Show what we're creating
      ansible.builtin.debug:
        msg: |
          Creating {{ instance_name }} in {{ aws_region }}
          Type: {{ instance_type }}
          Env: {{ resource_tags.Environment }}

    - name: Get default VPC
      amazon.aws.ec2_vpc_net_info:
        region: "{{ aws_region }}"
        filters:
          "is-default": "true"
      register: vpc_info

    - name: Create subnet
      amazon.aws.ec2_vpc_subnet:
        vpc_id: "{{ vpc_info.vpcs[0].vpc_id }}"
        cidr: "{{ vpc_cidr }}"
        az: "{{ availability_zone }}"
        region: "{{ aws_region }}"
        map_public: true
        state: "{{ _state }}"
        tags: "{{ resource_tags }}"
      register: subnet_info

    - name: Create internet gateway
      amazon.aws.ec2_vpc_igw:
        vpc_id: "{{ vpc_info.vpcs[0].vpc_id }}"
        region: "{{ aws_region }}"
        state: "{{ _state }}"
        tags: "{{ resource_tags }}"
      register: igw_info

    - name: Create route table
      amazon.aws.ec2_vpc_route_table:
        vpc_id: "{{ vpc_info.vpcs[0].vpc_id }}"
        region: "{{ aws_region }}"
        routes:
          - dest: "0.0.0.0/0"
            gateway_id: "{{ igw_info.gateway_id }}"
        subnets:
          - "{{ subnet_info.subnet.id }}"
        state: "{{ _state }}"
        tags: "{{ resource_tags }}"

    - name: Create security group
      amazon.aws.ec2_security_group:
        name: "{{ security_group_name }}"
        description: "{{ security_group_description }}"
        region: "{{ aws_region }}"
        rules:
          - proto: tcp
            ports:
              - "{{ ssh_port }}"
            cidr_ip: "{{ ssh_cidr }}"
        state: "{{ _state }}"
        tags: "{{ resource_tags }}"

    - name: Launch EC2 instance
      amazon.aws.ec2_instance:
        name: "{{ instance_name }}"
        instance_type: "{{ instance_type }}"
        image_id: "{{ ami_id }}"
        key_name: "{{ key_name }}"
        security_groups:
          - "{{ security_group_name }}"
        vpc_subnet_id: "{{ subnet_info.subnet.id }}"
        region: "{{ aws_region }}"
        wait: true
        state: "{{ _state }}"
        tags: "{{ resource_tags }}"
      register: instance

    - name: Check if instance is ready
      amazon.aws.ec2_instance_info:
        region: "{{ aws_region }}"
        instance_ids:
          - "{{ instance.instances[0].instance_id }}"
      register: my_instance

    - name: Wait for SSH to be ready
      ansible.builtin.wait_for:
        host: "{{ my_instance.instances[0].public_ip_address }}"
        port: 22
        delay: 30
        timeout: 300
      when: my_instance.instances[0].state.name == "running"

    - name: Add instance to in-memory inventory
      ansible.builtin.add_host:
        name: "{{ my_instance.instances[0].public_ip_address }}"
        groups: new_instances
        ansible_user: ubuntu
        ansible_ssh_private_key_file: "~/.ssh/{{ key_name }}.pem"
        ansible_ssh_common_args: "-o StrictHostKeyChecking=no"
      when: my_instance.instances[0].state.name == "running"

    - name: Show results
      ansible.builtin.debug:
        msg: |
          Created {{ instance_name }}
          ID: {{ instance.instances[0].instance_id }}
          Status: {{ my_instance.instances[0].state.name }}
          Public IP: {{ my_instance.instances[0].public_ip_address }}

- name: Configure the new Ubuntu instance
  hosts: new_instances
  become: true
  gather_facts: false
  tasks:
    - name: Wait for instance to be ready
      ansible.builtin.wait_for_connection:
        delay: 10
        timeout: 300

    - name: Update package cache
      ansible.builtin.apt:
        update_cache: true
        cache_valid_time: 0

    - name: Upgrade all packages
      ansible.builtin.apt:
        upgrade: dist
        autoremove: true

    - name: Install automatic security updates
      ansible.builtin.apt:
        name: unattended-upgrades
        state: present
        update_cache: true

    - name: Configure automatic security updates
      ansible.builtin.systemd:
        name: unattended-upgrades
        enabled: true
        state: started

    - name: Show completion
      ansible.builtin.debug:
        msg: "Ubuntu instance is ready and fully updated!"
